import java_cup.runtime.*;
   
parser code {:
    
    public void syntax_error(Symbol current_token) {
	   report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
   }
:};

terminal ID , BOOL , INT , RAT , FLOAT , CHAR , SEMI , MAIN , COMMA , TDEF , FDEF , IF , THEN , ELSE , RBRACE , LBRACE , RPAREN , LPAREN , COLON , ASSOP , READ , PRINT , FI, IN , DO , OD , WHILE , FORALL , RETURN, TOP , LEN, DOT, SEQ, DICT,LANGLB,RANGLB,PLUS,MINUS,DIV,MULT,EXP,AND,OR,IMPL,CONCAT,LT,LTEQ,GT,GTEQ,EQ,NOTEQ,NOT,LSQB,RSQB;

terminal Integer INT_V;
terminal Float FLOAT_V;
terminal String RAT_V;
terminal Char CHAR_V, BOOL_V;


non terminal program , main , statement , program_decl , var_decl , data_type_decl , 
			 declaration_list, formal_parameter_list , body , type , assignment , input , output , function_call , control_flow ,len,dict,seq, function_body,function_decl,expr,expr_part,tdef_list,alias,tdef_helper,general_function,formal_parameter_list_helper,statement_list,expr_list,item,iterable,seq_assignment,binary_operator,unary_operator,field_ref,assignment_type,dict_assignment,return_stmt,var_decl_empty,function_decl_empty,expr_part_slice,list_dict_elements,dict_element,list_dict_elements_helper,list_seq_assignment,seq_element,list_seq_assignment_helper,expr_helper,primitive,number,aggregated,expr_next,dict_element_helper;

precedence left LT,LTEQ,GT,GTEQ,EQ,NOTEQ;
precedence left IMPL;
precedence left PLUS, MINUS, OR;
precedence left MULT, DIV, LEN, AND, CONCAT;
precedence left MINUS,NOT;
precedence left EXP;
precedence left IN;
precedence left DOT,LBRACE,RBRACE,LPAREN,RPAREN,COLON,LANGLB,RANGLB,LSQB,RSQB;
precedence left ID;
start with program;

program 	::= 	declaration_list main declaration_list 
			;

main 		::=	MAIN LBRACE function_body RBRACE return_stmt
			;
return_stmt ::= COLON type
				|
			;

statement 	::=	assignment SEMI
					| input	SEMI
					| output SEMI
					| function_call SEMI
					| control_flow
			;

program_decl	::= 	var_decl SEMI
						|	function_decl SEMI 
						|	data_type_decl SEMI
				;

var_decl	::= 	ID COLON type var_decl_empty SEMI
			;

var_decl_empty ::=	ASSOP expr 
					|
				;
data_type_decl	::= 	TDEF ID LBRACE tdef_list RBRACE
						| alias ID type 
				;
tdef_list		::=		var_decl tdef_helper
				;
tdef_helper		::=		COMMA var_decl tdef_helper
						| 
				;
function_decl	::=	general_function function_decl_empty
				;
function_decl_empty ::= COLON type
						|
					;

general_function	::= 	FDEF ID LPAREN formal_parameter_list RPAREN LBRACE function_body RBRACE
					;

formal_parameter_list	 ::= 	var_decl formal_parameter_list_helper
								| 
						 ;

formal_parameter_list_helper	::= 	COMMA var_decl formal_parameter_list_helper
										| 
								;
declaration_list	::= 	program_decl declaration_list
							| 
					;


function_body	 ::=	body
				;

body  	::=		program_decl declaration_list statement statement_list
		;
statement_list ::=	statement statement_list
					|	
				;
type 			::= 		INT | RAT | FLOAT | BOOL | CHAR | seq | dict | TOP | ID
				;

assignment		::=			ID ASSOP expr_list 
				;  

input 			::=			READ ID
				;

output 			::=			PRINT expr
				;

function_call	::=			ID LPAREN expr_list RPAREN
				;


control_flow	::= 		IF LPAREN expr RPAREN THEN body FI
							| IF LPAREN expr RPAREN THEN body ELSE body FI
							| WHILE LPAREN expr RPAREN DO body OD
							| FORALL LPAREN item IN iterable RPAREN DO body OD
							| RETURN expr SEMI
				;
item			::=			ID;
iterable		::=			ID|seq_assignment
				;
binary_operator ::=			PLUS|MINUS|MULT|DIV|EXP|AND|OR|IMPL|CONCAT|LT|LTEQ|GT|GTEQ|EQ|NOTEQ|IN
				;
unary_operator	::=			MINUS|NOT
				;

len 			::= 		LEN LPAREN ID RPAREN
				;


field_ref		::=			ID DOT ID
				;
expr 			::= 		expr_part expr_next
				;
expr_next		::=			binary_operator expr_part
							| 
				;
expr_part 		::= 		function_call
							| assignment_type
							| len expr
							| ID LSQB expr RSQB
							| ID LSQB expr_part_slice RSQB
							| field_ref
							| ID
							| unary_operator expr
							| LPAREN expr RPAREN
				;
expr_part_slice	::=	expr COLON expr
						| expr COLON
						| COLON expr
					;
dict_assignment ::= LBRACE list_dict_elements RBRACE
				;
list_dict_elements	::=	dict_element list_dict_elements_helper
						| 
					;
list_dict_elements_helper	::=	COMMA dict_element list_dict_elements_helper
								| 
							;
dict_element 	::=			dict_element_helper COLON dict_element_helper
				;
dict_element_helper ::=	assignment_type|ID;

seq_assignment	::=	LSQB list_seq_assignment RSQB
				;
list_seq_assignment ::=  	seq_element list_seq_assignment_helper
							| 
					;
list_seq_assignment_helper ::=	COMMA seq_element list_seq_assignment_helper
								| 
							;
seq_element 	::=		assignment_type|ID
				;
expr_list		::=		expr expr_helper
				;
expr_helper 	::= 	COMMA expr expr_helper
						| 
				;

number		::= 		INT_V | FLOAT_V | RAT_V
			;

primitive 	::= 		number | BOOL_V | CHAR_V
			;

aggregated	::= 		seq_assignment | dict_assignment
			;

assignment_type ::=		primitive | aggregated
				;

dict 		::=			DICT LANGLB type COMMA type RANGLB
			;

seq 		::=			SEQ LANGLB type RANGLB
			;
